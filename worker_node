#include "FS.h"
#include "SPIFFS.h"
#include "LoRaWan_APP.h"
#include "Arduino.h"

// ========== Sensor Definition ==========
enum SensorType {
  SENSOR_NONE,
  SENSOR_TEMPERATURE,
  SENSOR_ILLUMINANCE,
  SENSOR_HUMIDITY
};

SensorType currentSensor = SENSOR_NONE;

// ========== LoRa Config ==========
char txpacket[64];
bool lora_idle = true;
double txNumber = 0;

static RadioEvents_t RadioEvents;
void OnTxDone(void);
void OnTxTimeout(void);

// ========== Setup ==========
void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("📦 System initializing...");

  // SPIFFS init
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ Failed to initialize SPIFFS");
    while (1);
  }

  // LoRa init
  Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);
  RadioEvents.TxDone = OnTxDone;
  RadioEvents.TxTimeout = OnTxTimeout;
  Radio.Init(&RadioEvents);
  Radio.SetChannel(915000000); // 915 MHz
  Radio.SetTxConfig(MODEM_LORA, 5, 0, 0, 7, 1, 8,
                    false, true, 0, 0, false, 3000);

  Serial.println("✅ System ready");

  updateDetectionTarget(SENSOR_TEMPERATURE); // Default sensor
}

// ========== Main Loop ==========
void loop() {
  // --- 1. 시리얼로 센서 전환 ---
  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd != '\n' && cmd != '\r') {
      switch (cmd) {
        case 't': updateDetectionTarget(SENSOR_TEMPERATURE); break;
        case 'l': updateDetectionTarget(SENSOR_ILLUMINANCE); break;
        case 'h': updateDetectionTarget(SENSOR_HUMIDITY); break;
        case 'n': updateDetectionTarget(SENSOR_NONE); break;
        default: Serial.println("❓ Unknown command"); break;
      }
    }
  }

  // --- 2. 센서 데이터 수집 & 저장 ---
  String sensorData = readFromCurrentSensor();
  saveToStorage(sensorData);

   // --- 3. 최신 저장된 데이터를 LoRa로 전송 ---
  if (lora_idle) {
    txNumber += 1;
    String latest = readLastLineFromStorage();  // 새로 추가된 함수 사용
    snprintf(txpacket, sizeof(txpacket), "[%0.0f] %s", txNumber, latest.c_str());
    Serial.printf("📤 Sending from storage: %s\n", txpacket);
    Radio.Send((uint8_t*)txpacket, strlen(txpacket));
    lora_idle = false;
  }

  Radio.IrqProcess();
  delay(5000);
}

// ========== Sensor Logic ==========
void updateDetectionTarget(SensorType target) {
  deactivateAllSensors();
  currentSensor = target;

  switch (target) {
    case SENSOR_TEMPERATURE: Serial.println("🌡️ Temp sensor activated"); break;
    case SENSOR_ILLUMINANCE: Serial.println("💡 Light sensor activated"); break;
    case SENSOR_HUMIDITY:    Serial.println("💧 Humidity sensor activated"); break;
    default:                 Serial.println("❌ No valid sensor selected"); break;
  }
}

void deactivateAllSensors() {
  Serial.println("🔌 All sensors deactivated");
}

String readFromCurrentSensor() {
  int value = random(0, 100);

  switch (currentSensor) {
    case SENSOR_TEMPERATURE: return "Temp: " + String(value) + "C";
    case SENSOR_ILLUMINANCE: return "Light: " + String(value) + "lx";
    case SENSOR_HUMIDITY:    return "Humidity: " + String(value) + "%";
    default: return "No active sensor";
  }
}

// ========== SPIFFS 저장 ==========
void saveToStorage(String data) {
  File file = SPIFFS.open("/data.txt", FILE_APPEND);
  if (!file) {
    Serial.println("❌ Failed to open file");
    return;
  }
  file.println(data);
  file.close();
  Serial.println("💾 Saved: " + data);
}

String readLastLineFromStorage() {
  File file = SPIFFS.open("/data.txt", FILE_READ);
  if (!file) {
    Serial.println("❌ Failed to open file for reading");
    return "ERROR: No data";
  }

  String lastLine = "";
  while (file.available()) {
    lastLine = file.readStringUntil('\n');  // 계속 덮어쓰기 → 마지막 줄만 남음
  }

  file.close();
  return lastLine;
}


// ========== LoRa 이벤트 ==========
void OnTxDone() {
  Serial.println("✅ LoRa TX done");
  lora_idle = true;
}

void OnTxTimeout() {
  Serial.println("⏱️ LoRa TX timeout");
  lora_idle = true;
}
